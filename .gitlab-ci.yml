# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: nexus.engageska-portugal.pt/ska-docker/ska-python-buildenv:latest

variables:
  DOCKER_DRIVER: overlay2

services:
  - docker:dind

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - build
  - test
  - linting
  - publish
  - pages
  - pages_on_failure

clean shell runner:
  stage: .pre
  tags:
    - docker-executor
  script:
    # Gitlab CI badges creation
    - rm -rf build/*

build wheel for publication: # Executed on a tag
  stage: build
  tags:
    - docker-executor
  script:
    - python setup.py egg_info -b+$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  only:
    - tags
  artifacts:
    paths:
      - ./dist/

build wheel for development: # Executed on a commit
  stage: build
  tags:
    - docker-executor
  script:
    - python setup.py egg_info -b+dev.$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  except:
    - tags
  artifacts:
    paths:
      - ./dist/

unit tests:
  stage: test
  image: nexus.engageska-portugal.pt/ska-docker/tango-builder:latest
  before_script:
  - docker login -u $DOCKER_REGISTRY_USERNAME -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY_HOST
  tags:
    - docker-executor
  script:
    - apt-get -y update
    - apt-get install -y python3-pip python3-setuptools --no-install-recommends
    - echo $(ls -d ./dist/*.whl | grep $CI_COMMIT_SHORT_SHA)
    - pip3 install -U $(ls -d ./dist/*.whl | grep $CI_COMMIT_SHORT_SHA)
    - make test
    - scripts/validate-metadata.sh

linting:
  stage: linting
  image: nexus.engageska-portugal.pt/ska-docker/tango-builder:latest
  before_script:
  - docker login -u $DOCKER_REGISTRY_USERNAME -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY_HOST
  tags:
    - docker-executor
  script:
    - apt-get -y update
    - apt-get install -y python3-pip --no-install-recommends
    - echo $(ls -d ./dist/*.whl | grep $CI_COMMIT_SHORT_SHA)
    - pip3 install -U $(ls -d ./dist/*.whl | grep $CI_COMMIT_SHORT_SHA)
    - make lint
    - pwd
    - ls -la
    - ls -la build/reports
    - ls -la /build/reports
    - cat /build/reports/linting.xml

publish to nexus:
  stage: publish
  tags:
    - docker-executor
  variables:
    TWINE_USERNAME: $TWINE_USERNAME
    TWINE_PASSWORD: $TWINE_PASSWORD
  script:
    # check metadata requirements
    - scripts/validate-metadata.sh
    - pip install twine
    - twine upload --repository-url $PYPI_REPOSITORY_URL dist/*
  only:
    variables:
      # Confirm tag message exists
      - $CI_COMMIT_MESSAGE =~ /^.+$/
      # Confirm semantic versioning of tag
      - $CI_COMMIT_TAG =~ /^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$/

pages:
  stage: pages
  image: nexus.engageska-portugal.pt/ska-docker/tango-builder:latest
  before_script:
  - docker login -u $DOCKER_REGISTRY_USERNAME -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY_HOST
  tags:
    - docker-executor
  script:
    - cp -R build public
    - mv public/lmcbaseclasses_htmlcov/* public
    # Copy metrics reports to respective locations (this needs to be automated by the team for their specific purposes)
    # - mkdir -p build/reports
    # - cp public/unit-tests.xml build/reports/unit-tests.xml
    # - cp public/lint_output.xml build/reports/linting.xml
    # - cp public/lmcbaseclasses_coverage.xml build/reports/code-coverage.xml
    # START: Gitlab CI badges creation
    # - curl -s https://gitlab.com/ska-telescope/ci-metrics-utilities/raw/master/scripts/ci-badges-func.sh | sh
    # END: Gitlab CI badges creation
    - make push
    - cat /build/reports/linting.xml
  artifacts:
    paths:
      - public

# build pages on failure:
#   stage: pages_on_failure
#   image: nexus.engageska-portugal.pt/ska-docker/tango-builder:latest
#   before_script:
#   - docker login -u $DOCKER_REGISTRY_USERNAME -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY_HOST
#   tags:
#     - docker-executor
#   script:
#     # Create the ci-metrics.json file (as an example we are just copying from a mock file to be deleted in a future commit)
#     - cp temp/ci-metrics-failed-mock.json ci-metrics.json
#     # START: Gitlab CI badges creation
#     - curl -s https://gitlab.com/ska-telescope/ci-metrics-utilities/raw/master/scripts/ci-badges-func.sh | sh
#     # END: Gitlab CI badges creation
#  when: on_failure

create ci metrics:
  stage: .post
  when: always
  tags:
    - docker-executor
  script:
    # Gitlab CI badges creation
    - apt-get -y update
    - apt-get install -y curl --no-install-recommends
    - curl -s https://gitlab.com/ska-telescope/ci-metrics-utilities/raw/master/scripts/ci-badges-func.sh | sh
  artifacts:
    paths:
      - public