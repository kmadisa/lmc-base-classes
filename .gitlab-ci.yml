# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: nexus.engageska-portugal.pt/ska-docker/ska-python-buildenv:latest

include:
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/post_step.yml'

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - build
  - test
  - linting
  - publish
  - pages


.install_pip: &install_pip |-
  apt-get -y update && apt-get install -yq curl python3-distutils
  curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && python3 get-pip.py

clean shell runner:
  stage: .pre
  tags:
    - docker-executor
  script:
    # Gitlab CI badges creation
    - rm -rf build/*

.preflight checks:
  stage: .pre
  tags:
    - docker-executor
  script:
    - apt-get install -yq iputils-ping curl
    - cat /etc/hosts
    - ping -c 3 deb.debian.org
    - ping -c 3 pypi.python.org \
        && curl -w %{http_code} -sSL https://pypi.org/simple -o /dev/null | grep -q ^2
    - ping -c 3 nexus.engageska-portugal.pt \
        && curl -w %{http_code} -sSL https://nexus.engageska-portugal.pt/repository/pypisdf -o /dev/null | grep -q ^2

build wheel for publication: # Executed on a tag
  stage: build
  tags:
    - docker-executor
  script:
    - python setup.py egg_info -b+$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  only:
    - tags
  artifacts:
    paths:
      - ./dist/

build wheel for development: # Executed on a commit
  stage: build
  tags:
    - docker-executor
  script:
    - python setup.py egg_info -b+dev.$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  except:
    - tags
  artifacts:
    paths:
      - ./dist/

unit tests:
  stage: test
  image: nexus.engageska-portugal.pt/ska-docker/tango-builder:latest
  before_script:
  - docker login -u $DOCKER_REGISTRY_USERNAME -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY_HOST
  - *install_pip
  tags:
    - docker-executor
  script:
    - echo $(ls -d ./dist/*.whl | grep $CI_COMMIT_SHORT_SHA)
    - pip3 install -U $(ls -d ./dist/*.whl | grep $CI_COMMIT_SHORT_SHA) --extra-index-url https://nexus.engageska-portugal.pt/repository/pypi/simple
    - make test
    - scripts/validate-metadata.sh
  artifacts:
    paths:
      - ./build

linting:
  stage: linting
  image: nexus.engageska-portugal.pt/ska-docker/tango-builder:latest
  before_script:
  - docker login -u $DOCKER_REGISTRY_USERNAME -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY_HOST
  - *install_pip
  tags:
    - docker-executor
  script:
    - echo $(ls -d ./dist/*.whl | grep $CI_COMMIT_SHORT_SHA)
    - pip3 install -U $(ls -d ./dist/*.whl | grep $CI_COMMIT_SHORT_SHA) --extra-index-url https://nexus.engageska-portugal.pt/repository/pypi/simple
    - make lint
  artifacts:
    paths:
      - ./build

publish to nexus:
  stage: publish
  tags:
    - docker-executor
  variables:
    TWINE_USERNAME: $TWINE_USERNAME
    TWINE_PASSWORD: $TWINE_PASSWORD
  script:
    # check metadata requirements
    - scripts/validate-metadata.sh
    - pip install twine
    - twine upload --repository-url $PYPI_REPOSITORY_URL dist/*
  only:
    variables:
      # Confirm tag message exists
      - $CI_COMMIT_MESSAGE =~ /^.+$/
      # Confirm semantic versioning of tag
      - $CI_COMMIT_TAG =~ /^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$/

pages:
  stage: pages
  image: nexus.engageska-portugal.pt/ska-docker/tango-builder:latest
  before_script:
  - docker login -u $DOCKER_REGISTRY_USERNAME -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY_HOST
  tags:
    - docker-executor
  script:
    - cp -R build public
    - mv public/lmcbaseclasses_htmlcov/* public
    - make push
  artifacts:
    paths:
      - public
